
Specification: (what the program is supposed to do)
The idea is to create a program that illustrate a fern with graphically. Eventually, we have to be able to come with some ground principle to illustrate the fern. The program we made is supposed to draw the first part of the stalk and then make a turn to either left and draw the leaves and sub-leaves. When the first side of the leaf the program heads back to the position. It draws the right side of the leaf and sub-leaves and every time we draw a leaf or sub-leaf and angle it gets 0,3 smaller and then it returns to position goes forward repeats itself, until the steps eventually goes down to zero.

Design: (how the program was planned) First of all, we divide the fern into smaller pieces and name them to get a better knowledge on how to make a program. Afterwards we came up with a function with some necessary parameters to create a fern. The parameters in the function are the turtle module, the width (thickness of each line), the segments (????) , the curve (angle every time we draw the next leaf) and steps is the length of the fern frond . Afterwards we began by making ideas for making it recursive, but we had a lot of trials because we didn’t have a position to return to the stalk.

Implementation: (how the program was written)
Generally, we define a function for the stem on the fern with several important parameters (length, width, segments curve, steps) For the demonstration of segments the for-loop is necessary method. The way for-loops work is for statement iterates over the members of a sequence in order, executing the block each time. The pen size is width of each line is in other words it is the thickness of the leaves and sub-leaves. And every time it goes to the next step the width downsizes with 0,3. he curve is the angle each time we go to the next sub-leaves and the stalk is also turn a bit to the left. At this point we had some difficulty because we didn’t have any position to return to when the sub-leaves were drawn. So we used a two methods called position and heading. The first method is a way to return the current position (x,y) in the graph which is very useful when we want to return back to the stalk and go forward. The other method is the heading which returns the turtle direction.

Testing: (what tests you performed)
At the beginning we had a lot of trials because we had some difficulty to make it recursive. Then we came up with the idea that to divide the fern into smaller pieces and make the program for each piece and put them together. But at the end it made it too hard to assemble the pieces together, so we tried another approach. At the end we finally made a function with all the parameters that worked with recursion. Then we realized that the runtime was way too long to execute, so we began to create another fern with a different method called clone. It’s the same method we used for the binary three assignment and with some different approach we made it work, however runtime was fast but because the clone method uses a lot of memory the execute time takes way too much time. 

def recursive_stem(t, length, width, segments, curve, steps):
    if steps == 0:
        return
    if length < 0.5:
        return
    for i in range(segments):
        t.pensize(width)
        t.lt(curve)
        t.fd(length)
        pos=t.pos()
        head=t.heading()
        t.rt(90)
        recursive_stem(t, length*0.3, width*0.3, segments, curve, steps-1)


